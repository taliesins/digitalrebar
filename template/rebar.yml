# Copyright 2016, RackN
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This package serves as a useable example of how a workload (also
# known as a barclamp) is layed out and what components are needed to
# build a working workload.

# The barclamp section defines metadata for the workload as a whole.
barclamp:

  # The name of the workload. Workload names must be unique, and
  # the workload name will be used when refering to it via the API.
  name: template

  # The user friendly name of the workload.
  display: "Template"

  # An one-line description of the workload
  description: "An example workload, useable as a template for other workloads."

  # The license the workload as a whole is distributed under.
  # Unless otherwise indicated on a file-by-file basis, all files that are
  # part of this worload have the same license.
  license: "apache2"

  # The URL to the full legal text of the license this workload is distributed under.
  license_url: "http://www.apache.org/licenses/LICENSE-2.0"

  # The copyright holder and date of this workload.
  copyright: "RackN, Inc 2016"

# The rebar section defines meta information about this rebar.yml file
# itself.  Right now, the only piece of information it carries is
# layout, which must be 2.0.
rebar:
  layout: 2.0

# The jigs section defines what (if any) new methods for running roles
# on nodes this workload introduces.  Jigs are generally things like
# devops tools (think ansible, chef, salt, etc).  Included below is a
# copy of the jigs section of the rebar.yml file from
# digitalrebar/core.  You can rely on any installation of Digital Rebar to have these
# jigs available to use to implement role specific functionality.
#jigs:

  # The script jig is the second simplest of the jigs to use.
  # Just create scripts under script/<role name>/*.sh, mark them as executable,
  # and the jig will run them in ascending lexical order.  The script jig provides
  # several helper functions to handle getting and setting any needed attribs, and some
  # simple distro-agnostic functions for basic package and service management.
  # See https://github.com/digitalrebar/core/blob/develop/script/runner for details -- it
  # is what the script jig actually uses to run your scripts in a controlled environment.
#  - name: script
#    class: 'BarclampRebar::Jig'
#    description: 'Run arbitrary scripts on nodes via SSH'
  # The noop jig is the simplest jig, because it does nothing.  Its primary
  # use is to easily write roles that can act as sequencing points for other roles.
#  - name: noop
#    class: NoopJig
#    description: "Jig used when roles have no action to run"
  # The test jig is used for regression testing the annealer, and should not be used
  # by production roles.
#  - name: test
#    description: 'Test jig for exercising jig and noderole operations.'
#    class: 'BarclampTest::Jig'
  # The chef jig allows you to run roles against a node using Chef and an external
  # Chef server.  Roles written against chef should be:
    # Small.  Do not run more than one or two recipes at a time.
    # Isolated.  Roles should be written to only run on one node at a time, and they should not
    # attempt to berform any ad-hoc cross-node synchronization.  Let the annealer handle that.
    # Searchless.  Rebar roles have a well-defined attribute lifecycle, and roles should
    # use it to get any extra attributes they need instead of relying on search.
  # Additionally, the chef jig handles maintaining the Chef node, client, and runlist for a node.
  # To write code for the chef jig, place the cookbooks you want to use in chef/cookbooks, and write
  # a Chef role file at chef/roles/role_name.rb.
#  - name: chef
#    class: 'BarclampChef::Jig'
#    description: "Allow Rebar to manage nodes using Chef"
#    implementor: chef-client
  # The chef-solo jig runs roles using Chef without a Chef server.  Nothing
  # currently uses it, and it is currently unmaintained, although all of the default
  # cookbooks that Rebar uses are specifically written to work equally well under chef-solo
  # and chef.
  # It uses the same file locations as the Chef jig.
#  - name: chef-solo
#    class: 'BarclampChef::SoloJig'
#    description: "Allow Rebar to manage nodes using chef-solo"
#    implementor: chef-solo
  # The puppet standalone jig.  Currently a proof-of-concept.  To write roles that use it,
  # place your modules in puppet/modules, and the .pp files that implement the roles in
  # puppet/roles/role-name/*.pp
#  - name: puppet-sa
#    class: 'BarclampPuppet::SaJig'
#    description: "Puppet jig for using standalone puppet agent"
  # This jig delegates its actions to a method on the Role itself.  It is used by
  # certian roles to provide custom (or adhoc) functionality.  It is not recommended that
  # you write new roles using the role-provided jig, as we are adding new functionality
  # based on the event system and the classifier to perform the same thing without
  # needing to run code in the Rails app.
#  - name: role-provided
#    class: 'BarclampRebar::RoleProvidedJig'
#    description: "Jig that delegates back to a role-provided do_transition method"
  # This jig allows you to run Ansible playbooks.  To use it to implement a role,
  # add the playbook .yml files to ansible-playbook/roles/role-name//*.yml
#  - name: ansible-playbook
#    class: 'BarclampRebar::AnsiblePlaybookJig'
#    description: "Allow Rebar to run an Ansible playbook against a node"
  # This jig allows you to run Ansible commands and modules directly against a node.
  # To use it to implement a role. add the command and/or module .yml files in
  # ansible/roles/role-name/*.yml
#  - name: ansible
#    class: 'BarclampRebar::AnsibleJig'
#    description: "Allow Rebar to run an Ansible command/module against a node"


# Roles describe discrete units of idempotent functionality that can
# be performed on a node.  Things like adding packages, configuring
# and managing service, configuring hardware, and installing an
# operating system are all implemented as Roles in Digital Rebar.
#
# Roles work hand-in-hand with Attribs -- roles both define what
# attributes they provide to a node and what attributes they need in
# order to do their job.  A more detailed explanation can be found at
# <insert link here>

roles:
  - name: template-do-nothing-unconditionally
    # Every role must have a unique name.  By convention. the name of the role
    # starts with the name of the workload it is defined in, but that is not mandatory.

    description: "Have the template role do nothing successfully"
    # Every role must have a brief description of what it does, so that users are not
    # lost in a twist maze of cryptic names, all alike.

    jig: noop
    # Roles must declare the jig they will use to perform their action.
    # This role does nothing using the noop jig, which cannot fail to do nothing.

    icon: 'assistant'
    # A Role can optionally declare which icon it should use as a display hint in the
    # UI.

    # Roles can also delare any number of flags that change how Rebar will handle
    # both noderole graph binding and annealer operations.
    flags:

      # Milestone declares that the role will show up in the UI.
      # - milestone

      # Implict tells rebar that this role must be bound to the same node as any roles
      # that require this role.
      - implicit

      # Discovery tells Rebar that this role should be bound to all newly-discovered nodes.
      # It is primarily used by roles that perform some sort of hardware discovery.
      # - discovery

      # Destructive indicates that the role is not idempotent, and it should only be run
      # once in any given lifecycle iteration of a node.  Operating system installs and
      # RAID reconfigurations are good examples of roles that require the destructive flag.
      # Enforcement of this flag is implemented by each noderole having a run counter, which
      # is incremented every time the noderole transitions to active.
      # - destructive

      # Service indicates that this role is a stand-in for an external service that other
      # roles in Rebar will have a dependency on.  An example is the chef-service role,
      # which points at the external chef server that Rebar should talk to for all chef-related
      # activities.
      # - service

      # Cluster indicates that all the bound instances of this role in a deployment
      # should be considered part of the same cluster.  It tells Rebar to build the noderole
      # graph dependencies to enforce that every noderole for this role share parents and children
      # with all their peers in the same deployment.  This ensures that all members of a
      # cluster come up only when all their prerequisites are up, and that none of their children
      # come up until all members of the cluster are up.  The code that implements the roles
      # should ensure that the cluster has quorum before finishing.
      # - cluster

      # Powersave tells that Rebar can turn the node off when this role sucessfully runs,
      # provided the following conditions are met:
        # None of the children of this role on the node are in a state other than proposed,
        # and none of them have run.
        # All of the other roles on the node are active.
      # - powersave

      # Leaverunlog tells the annealer to not clear the runlog for the noderole when
      # the role is run against a node.
      - leaverunlog

    # Requires defines parent-child relationships between roles.  All together,
    # the roles must form a directed acyclic dependency graph -- Rebar will refuse to
    # import a workload that will cause a cyclic dependency.  The graph of noderole
    # bindings that is derived from the role graph will also honor these dependencies
    requires:
      # If a role is dependent on another role being active in a deployment, it needs
      # to have a requires: section.  I have arbitrarily decided that this role
      # needs to have the OS installed.
      - rebar-installed-node

    # Each role can define a set of attributes that it is responsible for providing to
    # the rest of the system.
    #
    # Attribs, by themselves, do not actually store any data other than
    # what they define as part of their definition.  Their working data actually
    # comes from JSON data stores attached to the following types of objects:
      # Nodes
      # DeploymentRoles
      # NodeRoles
    #
    # Attribs can be defined as either part of a role, or
    # as part of the top-level rebar.yml.  Ones defined as part of a role are tied
    # to that role, and will get data from either a deploymentrole or a noderole that
    # is also bound to that role.  Ones that are defined at the top level of a rebar.yml
    # will always get their data from a node directly.
    attribs:

      - name: template-value-1
        # Each attribute must have a name, and the name must be unique.

        description: 'Template value number 1.  This attribute is not actually used.'
        # Each attribute must have a brief description of what it is for.

        map: 'template/value_1'
        # map tells the system where in the JSON data store we are operating against
        # to extract the attrib value from.  The map acts a slash delimeted path into
        # the JSON data store.

        # default defines the default value of the attrib if nothing else is applicable.
        # The value must be expressable as valid JSON.  Since JSON is a subset of YAML,
        # you can usually write it out as a regular YAML value.
        default: 'five'

        # schema defines a Kwalify schema fragment that will be used to validate
        # any user data pushed into the system via the API.  The schema section is optional,
        # but if it is missing the system will refuse to accept attribute values from the API.
        #
        # The Kwalify schema language is defined at http://www.kuwata-lab.com/kwalify/
        # I have plans to move to JSON schema in the future, as Kwalify is currently
        # unmaintained and only available for Ruby and Java.
        schema:
          type: str
          required: true

  - name: template-echo-a-value-with-a-script
    # As the name implies, this role will just echo a value by running a script
    # on a node.  The value to echo will be the one stored in the 'template-value-1'
    # attribute defined in the previous role.

    description: 'This role echoes the value of the template-value-1 attrib'

    jig: script
    # This role will be implemented using the script jig.  The scripts for this role
    # are in script/roles/template-echo-a-value-with-a-script.

    # wants-attribs declares that this role requires attribs from somewhere else
    # in Rebar.  If the attrib is a node-bound attrib, then the attrib will be
    # retrieved from the node that the role is bound to.  Otherwise, Rebar will
    # make sure that the role providing the attribute is bound in the noderole graph
    # as a parent of the noderole that wants the attribute, binding it to the current node
    # if it is not otherwise bound.
    wants-attribs:
      - template-value-1
    attribs:
      - name: template-value-2
        map: 'template/value_2'
        description: 'This value is set by the script that implements this role'
  - name: template-scrub-node
    description: "Indicates that the node has finished its scrub operation"
    jig: noop
    requires:
      - rebar-managed-node

# Attribs defined at the top level of a rebar.yml are node-specific.
# Otherwise, they operate the same as attribs that are bound to a role.
attribs:
  - name: template-value-3
    map: 'template/value_3'
    description: 'This value can be set via the API or as the result of a script run'
    schema:
      type: bool
      required: true
    default: false

profiles:
  - name: template-profile-1
    values:
      provisioner-target_os: centos-7.4.1708
